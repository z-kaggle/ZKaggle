{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bounty",
          "type": "address"
        }
      ],
      "name": "BountyCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bounties",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bountyCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bountyTemplate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_dataCID",
          "type": "bytes"
        }
      ],
      "name": "createBounty",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb6539bca2dbf380d27a6c9b7e318da79da417597db958c371a6fca18e85462bc",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "3732579",
    "logsBloom": "0x
    "blockHash": "0x1b9bad5f629ba2913acf1731e8496d8c5147ae610f42f72ff3407f17e190e00f",
    "transactionHash": "0xb6539bca2dbf380d27a6c9b7e318da79da417597db958c371a6fca18e85462bc",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "3732579",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "924bc396c7b9c411854743494eaf1916",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bounty\",\"type\":\"address\"}],\"name\":\"BountyCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bounties\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bountyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bountyTemplate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_dataCID\",\"type\":\"bytes\"}],\"name\":\"createBounty\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BountyFactory.sol\":\"BountyFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x888d64d221d52c31d015b76e50ca1af5ef8ff076550810b49cea6b01d8267a10\",\"license\":\"MIT\"},\"contracts/Bounty.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./IVerifier.sol\\\";\\n\\ncontract Bounty is Initializable, OwnableUpgradeable {\\n    uint public completedStep;\\n    // variables set by bounty provier at Tx 1 (constructor)\\n    string public name;\\n    string public description;\\n    bytes public dataCID;\\n    // reward amount is not stored, use contract balance instead\\n\\n    // variables set by bounty hunter at Tx 2\\n    address public bountyHunter;\\n    bytes public zkeyCID;\\n    bytes public circomCID;\\n    bytes public verifierCID;\\n    IVerifier public verifier;\\n    uint[2] public a;\\n    uint[2][2] public b;\\n    uint[2] public c;\\n    uint[] public hashedInput;\\n\\n    // variables set by bounty provider at Tx 3\\n    bool public isComplete;\\n\\n    // variabels set by bounty hunter at Tx 4\\n    uint[] public input;\\n\\n    uint8 public constant CID_VERSION = 1;\\n    uint8 public constant CID_CODEC = 0x55; // for raw buffer\\n    uint8 public constant CID_HASH = 0x12; // for sha256\\n    uint8 public constant CID_LENGTH = 32; // for sha256\\n\\n    // ! current design only allows one bounty hunter to submit proof\\n    // TODO: allow multiple bounty hunters to submit proof\\n\\n    event BountySubmitted();\\n    event BountyReleased();\\n    event BountyClaimed();\\n\\n    /*\\n        Tx 1\\n        * take owner address from factory\\n        * set bounty details\\n        * receive native tokens as bounty reward\\n    */\\n    function initialize (\\n        address _owner,\\n        string memory _name,\\n        string memory _description,\\n        bytes memory _dataCID\\n    ) public payable initializer {\\n        require(msg.value > 0, \\\"Bounty reward must be greater than 0\\\");\\n        __Ownable_init();\\n        transferOwnership(_owner);\\n        name = _name;\\n        description = _description;\\n        dataCID = _dataCID;\\n\\n        completedStep = 1;\\n    }\\n\\n    /*\\n        Tx 2: submit bounty\\n        * submit CID of zkey, circom\\n        * submit verifier address\\n        * submit proof\\n    */\\n    function submitBounty(\\n        bytes memory _zkeyCID,\\n        bytes memory _circomCID,\\n        bytes memory _verifierCID,\\n        address _verifier,\\n        uint[2] memory _a,\\n        uint[2][2] memory _b,\\n        uint[2] memory _c,\\n        uint[] memory _hashedInput\\n        /*\\n         * should be length 4, will extend to support arbitrary length\\n         * first two elements are hash of computed results\\n         * last two elements are the dataCID\\n         */\\n    ) public {\\n        require(_hashedInput.length == 4, \\\"Invalid hashed input length\\\"); // TODO: support arbitrary length\\n        require(bountyHunter == address(0), \\\"Bounty already submitted\\\");\\n        // verifier address should not be 0x0\\n        require(_verifier != address(0), \\\"Invalid verifier address\\\");\\n        // * can save gas by pre-hashing dataCID\\n        require(\\n            keccak256(dataCID) ==\\n                keccak256(\\n                    abi.encodePacked(\\n                        CID_VERSION,\\n                        CID_CODEC,\\n                        CID_HASH,\\n                        CID_LENGTH,\\n                        concatDigest(_hashedInput[2], _hashedInput[3])\\n                    )\\n                ),\\n            \\\"Data CID mismatch\\\"\\n        );\\n\\n        verifier = IVerifier(_verifier);\\n        require(verifier.verifyProof(_a, _b, _c, _hashedInput), \\\"Invalid proof\\\");\\n        a = _a;\\n        b = _b;\\n        c = _c;\\n        hashedInput = _hashedInput;\\n\\n        zkeyCID = _zkeyCID;\\n        circomCID = _circomCID;\\n        verifierCID = _verifierCID;\\n\\n        bountyHunter = msg.sender;\\n\\n        emit BountySubmitted();\\n        completedStep = 2;\\n    }\\n\\n    /*\\n        Tx 3: release bounty\\n        * only callable by bounty provider\\n        * only callable if bounty is not complete\\n        * only callable if bounty hunter has submitted proof\\n    */\\n    function releaseBounty() public onlyOwner {\\n        require(!isComplete, \\\"Bounty is already complete\\\");\\n        require(a[0] != 0, \\\"Bounty hunter has not submitted proof\\\");\\n        isComplete = true;\\n\\n        emit BountyReleased();\\n        completedStep = 3;\\n    }\\n\\n    /*\\n        Tx 4: claim bounty\\n        * function to submit preimage of hashed input\\n        * only callable if SHA256 of preimage matched hashed input\\n        * only callable if bounty is complete\\n    */\\n    function claimBounty(uint[] memory _input) public {\\n        require(_input.length == 2, \\\"Invalid input length\\\"); // TODO: support arbitrary length\\n        require(msg.sender == bountyHunter, \\\"Only bounty hunter can claim bounty\\\");\\n        require(isComplete, \\\"Bounty is not complete\\\");\\n        require(address(this).balance > 0, \\\"Bounty already claimed\\\");\\n\\n        // check if preimage matches hashed input\\n        require(\\n            sha256(abi.encode(_input[0], _input[1])) == concatDigest(hashedInput[0], hashedInput[1]),\\n            \\\"Invalid preimage\\\"\\n        );\\n        input = _input;\\n        payable(msg.sender).transfer(address(this).balance);\\n\\n        emit BountyClaimed();\\n        completedStep = 4;\\n    }\\n\\n    // function to concat input into digest\\n    function concatDigest(uint input1, uint input2) public pure returns (bytes32) {\\n        return bytes32((input1 << 128) + input2);\\n    }\\n\\n    // view function to verify proof\\n    function verifyProof(\\n        uint[2] memory _a,\\n        uint[2][2] memory _b,\\n        uint[2] memory _c,\\n        uint[] memory _hashedInput\\n    ) public view returns (bool) {\\n        require(verifier != IVerifier(address(0)), \\\"Verifier not set\\\");\\n        return verifier.verifyProof(_a, _b, _c, _hashedInput);\\n    }\\n\\n    // function to cancel bounty and withdraw reward\\n\\n    // TODO: function to edit bounty details\\n}\\n\",\"keccak256\":\"0x63b631c4db52aec0f7368e3b2dff34174da636f6af194228d17d4949f3bcd1e9\",\"license\":\"GPL-3.0\"},\"contracts/BountyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Bounty.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\ncontract BountyFactory {\\n    address public immutable bountyTemplate;\\n    address[] public bounties;\\n    uint public bountyCount;\\n\\n    event BountyCreated(address indexed bounty);\\n\\n    constructor() {\\n        bountyTemplate = address(new Bounty());\\n    }\\n\\n    function createBounty(\\n        string memory _name,\\n        string memory _description,\\n        bytes memory _dataCID\\n    ) public payable returns (address) {\\n        require(msg.value > 0, \\\"BountyFactory: must send more than 0 wei to create bounty\\\");\\n        address clone = Clones.clone(bountyTemplate);\\n        Bounty(clone).initialize{value: msg.value}(msg.sender, _name, _description, _dataCID);\\n        bounties.push(clone);\\n        emit BountyCreated(clone);\\n        bountyCount++;\\n        return clone;\\n    }\\n}\",\"keccak256\":\"0x4e1e9c884363b339df8b809f59cbead91c75c2dcdf7bdf5f7264eb89ea68f9ea\",\"license\":\"GPL-3.0\"},\"contracts/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.17;\\n\\ninterface IVerifier {\\n    function verifyProof(\\n        uint[2] memory a,\\n        uint[2][2] memory b,\\n        uint[2] memory c,\\n        uint[] memory input\\n    ) external view returns (bool);\\n}\",\"keccak256\":\"0xf995461ca40acdb8036c7e36528b7f155524240c446d5b6d7fba57806f68f249\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161001d90610072565b604051809103906000f080158015610039573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505061007f565b61380a80610adb83390190565b608051610a3a6100a16000396000818161010f01526101bb0152610a3a6000f3fe60806040526004361061003f5760003560e01c80633e362c961461004457806347e669471461006f578063dc2f87441461009a578063e21ee03d146100d7575b600080fd5b34801561005057600080fd5b50610059610107565b60405161006691906103ef565b60405180910390f35b34801561007b57600080fd5b5061008461010d565b604051610091919061044b565b60405180910390f35b3480156100a657600080fd5b506100c160048036038101906100bc91906104a6565b610131565b6040516100ce919061044b565b60405180910390f35b6100f160048036038101906100ec91906106ba565b610170565b6040516100fe919061044b565b60405180910390f35b60015481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061014157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008034116101b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ab906107e4565b60405180910390fd5b60006101df7f000000000000000000000000000000000000000000000000000000000000000061031c565b90508073ffffffffffffffffffffffffffffffffffffffff1663267eb9ed34338888886040518663ffffffff1660e01b815260040161022194939291906108c7565b6000604051808303818588803b15801561023a57600080fd5b505af115801561024e573d6000803e3d6000fd5b50505050506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f296fd2c434595e170589ead76f71af701ab651dd12e03e8c108123ec7c809a7360405160405180910390a26001600081548092919061030c90610950565b9190505550809150509392505050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f09050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036103d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c8906109e4565b60405180910390fd5b919050565b6000819050919050565b6103e9816103d6565b82525050565b600060208201905061040460008301846103e0565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104358261040a565b9050919050565b6104458161042a565b82525050565b6000602082019050610460600083018461043c565b92915050565b6000604051905090565b600080fd5b600080fd5b610483816103d6565b811461048e57600080fd5b50565b6000813590506104a08161047a565b92915050565b6000602082840312156104bc576104bb610470565b5b60006104ca84828501610491565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610526826104dd565b810181811067ffffffffffffffff82111715610545576105446104ee565b5b80604052505050565b6000610558610466565b9050610564828261051d565b919050565b600067ffffffffffffffff821115610584576105836104ee565b5b61058d826104dd565b9050602081019050919050565b82818337600083830152505050565b60006105bc6105b784610569565b61054e565b9050828152602081018484840111156105d8576105d76104d8565b5b6105e384828561059a565b509392505050565b600082601f830112610600576105ff6104d3565b5b81356106108482602086016105a9565b91505092915050565b600067ffffffffffffffff821115610634576106336104ee565b5b61063d826104dd565b9050602081019050919050565b600061065d61065884610619565b61054e565b905082815260208101848484011115610679576106786104d8565b5b61068484828561059a565b509392505050565b600082601f8301126106a1576106a06104d3565b5b81356106b184826020860161064a565b91505092915050565b6000806000606084860312156106d3576106d2610470565b5b600084013567ffffffffffffffff8111156106f1576106f0610475565b5b6106fd868287016105eb565b935050602084013567ffffffffffffffff81111561071e5761071d610475565b5b61072a868287016105eb565b925050604084013567ffffffffffffffff81111561074b5761074a610475565b5b6107578682870161068c565b9150509250925092565b600082825260208201905092915050565b7f426f756e7479466163746f72793a206d7573742073656e64206d6f726520746860008201527f616e20302077656920746f2063726561746520626f756e747900000000000000602082015250565b60006107ce603983610761565b91506107d982610772565b604082019050919050565b600060208201905081810360008301526107fd816107c1565b9050919050565b600081519050919050565b60005b8381101561082d578082015181840152602081019050610812565b60008484015250505050565b600061084482610804565b61084e8185610761565b935061085e81856020860161080f565b610867816104dd565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b600061089982610872565b6108a3818561087d565b93506108b381856020860161080f565b6108bc816104dd565b840191505092915050565b60006080820190506108dc600083018761043c565b81810360208301526108ee8186610839565b905081810360408301526109028185610839565b90508181036060830152610916818461088e565b905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061095b826103d6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361098d5761098c610921565b5b600182019050919050565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b60006109ce601683610761565b91506109d982610998565b602082019050919050565b600060208201905081810360008301526109fd816109c1565b905091905056fea26469706673582212202bc5b1eabb47fd14a165a9a00410d7db1a37fdc39800b9d22865e484cc1010ee64736f6c63430008110033608060405234801561001057600080fd5b506137ea806100206000396000f3fe6080604052600436106101b75760003560e01c806372269b7d116100ec578063c404ede91161008a578063cffe3ba011610064578063cffe3ba0146105e3578063d9a7b98b14610620578063f0fdf8341461064b578063f2fde38b14610688576101b7565b8063c404ede914610550578063ce6e1c4e1461057b578063cf77cea8146105b8576101b7565b80638da5cb5b116100c65780638da5cb5b14610492578063ad19b7c6146104bd578063b2fa1c9e146104e8578063c32e370e14610513576101b7565b806372269b7d146103ff5780637284e4161461042a5780637f43be5314610455576101b7565b80632b7ac3f311610159578063436e627011610133578063436e6270146103435780634f8dd50d1461036e5780635a34e0df146103ab578063715018a6146103e8576101b7565b80632b7ac3f3146102c45780632d4bdb51146102ef578063330da3d41461031a576101b7565b80631c525905116101955780631c5259051461023d5780631d8a37691461026657806321f103a61461027d578063267eb9ed146102a8576101b7565b806304b4b8c5146101bc57806306fdde03146101e75780630d11200914610212575b600080fd5b3480156101c857600080fd5b506101d16106b1565b6040516101de9190611af9565b60405180910390f35b3480156101f357600080fd5b506101fc6106d7565b6040516102099190611ba4565b60405180910390f35b34801561021e57600080fd5b50610227610765565b6040516102349190611be2565b60405180910390f35b34801561024957600080fd5b50610264600480360381019061025f9190611fd2565b61076a565b005b34801561027257600080fd5b5061027b610b95565b005b34801561028957600080fd5b50610292610c97565b60405161029f919061214f565b60405180910390f35b6102c260048036038101906102bd9190612212565b610d25565b005b3480156102d057600080fd5b506102d9610eeb565b6040516102e6919061232c565b60405180910390f35b3480156102fb57600080fd5b50610304610f11565b6040516103119190612356565b60405180910390f35b34801561032657600080fd5b50610341600480360381019061033c9190612371565b610f17565b005b34801561034f57600080fd5b50610358611241565b6040516103659190611be2565b60405180910390f35b34801561037a57600080fd5b50610395600480360381019061039091906123ba565b611246565b6040516103a29190612356565b60405180910390f35b3480156103b757600080fd5b506103d260048036038101906103cd91906123ba565b611261565b6040516103df9190612356565b60405180910390f35b3480156103f457600080fd5b506103fd611285565b005b34801561040b57600080fd5b50610414611299565b604051610421919061214f565b60405180910390f35b34801561043657600080fd5b5061043f611327565b60405161044c9190611ba4565b60405180910390f35b34801561046157600080fd5b5061047c600480360381019061047791906123e7565b6113b5565b6040516104899190612440565b60405180910390f35b34801561049e57600080fd5b506104a76113d2565b6040516104b49190611af9565b60405180910390f35b3480156104c957600080fd5b506104d26113fc565b6040516104df919061214f565b60405180910390f35b3480156104f457600080fd5b506104fd61148a565b60405161050a9190612476565b60405180910390f35b34801561051f57600080fd5b5061053a60048036038101906105359190612491565b61149d565b6040516105479190612476565b60405180910390f35b34801561055c57600080fd5b506105656115db565b604051610572919061214f565b60405180910390f35b34801561058757600080fd5b506105a2600480360381019061059d91906123ba565b611669565b6040516105af9190612356565b60405180910390f35b3480156105c457600080fd5b506105cd61168d565b6040516105da9190611be2565b60405180910390f35b3480156105ef57600080fd5b5061060a600480360381019061060591906123e7565b611692565b6040516106179190612356565b60405180910390f35b34801561062c57600080fd5b506106356116c0565b6040516106429190611be2565b60405180910390f35b34801561065757600080fd5b50610672600480360381019061066d91906123ba565b6116c5565b60405161067f9190612356565b60405180910390f35b34801561069457600080fd5b506106af60048036038101906106aa9190612516565b6116e0565b005b606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606680546106e490612572565b80601f016020809104026020016040519081016040528092919081815260200182805461071090612572565b801561075d5780601f106107325761010080835404028352916020019161075d565b820191906000526020600020905b81548152906001019060200180831161074057829003601f168201915b505050505081565b601281565b60048151146107ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a5906125ef565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461083f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108369061265b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036108ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a5906126c7565b60405180910390fd5b60016055601260206108f6856002815181106108cd576108cc6126e7565b5b6020026020010151866003815181106108e9576108e86126e7565b5b60200260200101516113b5565b60405160200161090a95949392919061276d565b60405160208183030381529060405280519060200120606860405161092f919061286f565b604051809103902014610977576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096e906128d2565b60405180910390fd5b84606d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c32e370e858585856040518563ffffffff1660e01b8152600401610a199493929190612b32565b602060405180830381865afa158015610a36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5a9190612bac565b610a99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9090612c25565b60405180910390fd5b83606e906002610aaa92919061198c565b50826070906002610abc9291906119cc565b50816074906002610ace92919061198c565b508060769080519060200190610ae5929190611a1c565b5087606a9081610af59190612dd2565b5086606b9081610b059190612dd2565b5085606c9081610b159190612dd2565b5033606960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f1b0c0dd832de03dc3b6f1d5ec24c8bd3b9ee786e380c868cfce39066dabf41fc60405160405180910390a160026065819055505050505050505050565b610b9d611763565b607760009054906101000a900460ff1615610bed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be490612ef0565b60405180910390fd5b6000606e600060028110610c0457610c036126e7565b5b015403610c46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3d90612f82565b60405180910390fd5b6001607760006101000a81548160ff0219169083151502179055507f45548bf4d20d74cd3a7a30bc6c9864aa12f0791d19a62c7e6978a55f444c98ca60405160405180910390a16003606581905550565b606a8054610ca490612572565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd090612572565b8015610d1d5780601f10610cf257610100808354040283529160200191610d1d565b820191906000526020600020905b815481529060010190602001808311610d0057829003601f168201915b505050505081565b60008060019054906101000a900460ff16159050808015610d565750600160008054906101000a900460ff1660ff16105b80610d835750610d65306117e1565b158015610d825750600160008054906101000a900460ff1660ff16145b5b610dc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db990613014565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610dff576001600060016101000a81548160ff0219169083151502179055505b60003411610e42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e39906130a6565b60405180910390fd5b610e4a611804565b610e53856116e0565b8360669081610e629190613121565b508260679081610e729190613121565b508160689081610e829190612dd2565b5060016065819055508015610ee45760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610edb919061322e565b60405180910390a15b5050505050565b606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60655481565b6002815114610f5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5290613295565b60405180910390fd5b606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610feb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe290613327565b60405180910390fd5b607760009054906101000a900460ff1661103a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103190613393565b60405180910390fd5b6000471161107d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611074906133ff565b60405180910390fd5b6110c56076600081548110611095576110946126e7565b5b906000526020600020015460766001815481106110b5576110b46126e7565b5b90600052602060002001546113b5565b6002826000815181106110db576110da6126e7565b5b6020026020010151836001815181106110f7576110f66126e7565b5b602002602001015160405160200161111092919061341f565b60405160208183030381529060405260405161112c9190613479565b602060405180830381855afa158015611149573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061116c91906134bc565b146111ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a390613535565b60405180910390fd5b80607890805190602001906111c2929190611a1c565b503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015611209573d6000803e3d6000fd5b507f861fbe132e4ab69b880ef4638db144df98fccfc72599a4a18bc953a261eaa2c360405160405180910390a1600460658190555050565b602081565b6074816002811061125657600080fd5b016000915090505481565b6076818154811061127157600080fd5b906000526020600020016000915090505481565b61128d611763565b611297600061185d565b565b606c80546112a690612572565b80601f01602080910402602001604051908101604052809291908181526020018280546112d290612572565b801561131f5780601f106112f45761010080835404028352916020019161131f565b820191906000526020600020905b81548152906001019060200180831161130257829003601f168201915b505050505081565b6067805461133490612572565b80601f016020809104026020016040519081016040528092919081815260200182805461136090612572565b80156113ad5780601f10611382576101008083540402835291602001916113ad565b820191906000526020600020905b81548152906001019060200180831161139057829003601f168201915b505050505081565b600081608084901b6113c79190613584565b60001b905092915050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6068805461140990612572565b80601f016020809104026020016040519081016040528092919081815260200182805461143590612572565b80156114825780601f1061145757610100808354040283529160200191611482565b820191906000526020600020905b81548152906001019060200180831161146557829003601f168201915b505050505081565b607760009054906101000a900460ff1681565b60008073ffffffffffffffffffffffffffffffffffffffff16606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361152f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152690613604565b60405180910390fd5b606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c32e370e868686866040518563ffffffff1660e01b81526004016115909493929190612b32565b602060405180830381865afa1580156115ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d19190612bac565b9050949350505050565b606b80546115e890612572565b80601f016020809104026020016040519081016040528092919081815260200182805461161490612572565b80156116615780601f1061163657610100808354040283529160200191611661565b820191906000526020600020905b81548152906001019060200180831161164457829003601f168201915b505050505081565b6078818154811061167957600080fd5b906000526020600020016000915090505481565b600181565b607082600281106116a257600080fd5b6002020181600281106116b457600080fd5b01600091509150505481565b605581565b606e81600281106116d557600080fd5b016000915090505481565b6116e8611763565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611757576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174e90613696565b60405180910390fd5b6117608161185d565b50565b61176b611923565b73ffffffffffffffffffffffffffffffffffffffff166117896113d2565b73ffffffffffffffffffffffffffffffffffffffff16146117df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d690613702565b60405180910390fd5b565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611853576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184a90613794565b60405180910390fd5b61185b61192b565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600060019054906101000a900460ff1661197a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197190613794565b60405180910390fd5b61198a611985611923565b61185d565b565b82600281019282156119bb579160200282015b828111156119ba57825182559160200191906001019061199f565b5b5090506119c89190611a69565b5090565b82600280028101928215611a0b579160200282015b82811115611a0a578251829060026119fa92919061198c565b50916020019190600201906119e1565b5b509050611a189190611a86565b5090565b828054828255906000526020600020908101928215611a58579160200282015b82811115611a57578251825591602001919060010190611a3c565b5b509050611a659190611a69565b5090565b5b80821115611a82576000816000905550600101611a6a565b5090565b5b80821115611aa65760008181611a9d9190611aaa565b50600201611a87565b5090565b506000815560010160009055565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ae382611ab8565b9050919050565b611af381611ad8565b82525050565b6000602082019050611b0e6000830184611aea565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611b4e578082015181840152602081019050611b33565b60008484015250505050565b6000601f19601f8301169050919050565b6000611b7682611b14565b611b808185611b1f565b9350611b90818560208601611b30565b611b9981611b5a565b840191505092915050565b60006020820190508181036000830152611bbe8184611b6b565b905092915050565b600060ff82169050919050565b611bdc81611bc6565b82525050565b6000602082019050611bf76000830184611bd3565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611c5382611b5a565b810181811067ffffffffffffffff82111715611c7257611c71611c1b565b5b80604052505050565b6000611c85611bfd565b9050611c918282611c4a565b919050565b600067ffffffffffffffff821115611cb157611cb0611c1b565b5b611cba82611b5a565b9050602081019050919050565b82818337600083830152505050565b6000611ce9611ce484611c96565b611c7b565b905082815260208101848484011115611d0557611d04611c16565b5b611d10848285611cc7565b509392505050565b600082601f830112611d2d57611d2c611c11565b5b8135611d3d848260208601611cd6565b91505092915050565b611d4f81611ad8565b8114611d5a57600080fd5b50565b600081359050611d6c81611d46565b92915050565b600067ffffffffffffffff821115611d8d57611d8c611c1b565b5b602082029050919050565b600080fd5b6000819050919050565b611db081611d9d565b8114611dbb57600080fd5b50565b600081359050611dcd81611da7565b92915050565b6000611de6611de184611d72565b611c7b565b90508060208402830185811115611e0057611dff611d98565b5b835b81811015611e295780611e158882611dbe565b845260208401935050602081019050611e02565b5050509392505050565b600082601f830112611e4857611e47611c11565b5b6002611e55848285611dd3565b91505092915050565b600067ffffffffffffffff821115611e7957611e78611c1b565b5b602082029050919050565b6000611e97611e9284611e5e565b611c7b565b90508060408402830185811115611eb157611eb0611d98565b5b835b81811015611eda5780611ec68882611e33565b845260208401935050604081019050611eb3565b5050509392505050565b600082601f830112611ef957611ef8611c11565b5b6002611f06848285611e84565b91505092915050565b600067ffffffffffffffff821115611f2a57611f29611c1b565b5b602082029050602081019050919050565b6000611f4e611f4984611f0f565b611c7b565b90508083825260208201905060208402830185811115611f7157611f70611d98565b5b835b81811015611f9a5780611f868882611dbe565b845260208401935050602081019050611f73565b5050509392505050565b600082601f830112611fb957611fb8611c11565b5b8135611fc9848260208601611f3b565b91505092915050565b6000806000806000806000806101a0898b031215611ff357611ff2611c07565b5b600089013567ffffffffffffffff81111561201157612010611c0c565b5b61201d8b828c01611d18565b985050602089013567ffffffffffffffff81111561203e5761203d611c0c565b5b61204a8b828c01611d18565b975050604089013567ffffffffffffffff81111561206b5761206a611c0c565b5b6120778b828c01611d18565b96505060606120888b828c01611d5d565b95505060806120998b828c01611e33565b94505060c06120aa8b828c01611ee4565b9350506101406120bc8b828c01611e33565b92505061018089013567ffffffffffffffff8111156120de576120dd611c0c565b5b6120ea8b828c01611fa4565b9150509295985092959890939650565b600081519050919050565b600082825260208201905092915050565b6000612121826120fa565b61212b8185612105565b935061213b818560208601611b30565b61214481611b5a565b840191505092915050565b600060208201905081810360008301526121698184612116565b905092915050565b600067ffffffffffffffff82111561218c5761218b611c1b565b5b61219582611b5a565b9050602081019050919050565b60006121b56121b084612171565b611c7b565b9050828152602081018484840111156121d1576121d0611c16565b5b6121dc848285611cc7565b509392505050565b600082601f8301126121f9576121f8611c11565b5b81356122098482602086016121a2565b91505092915050565b6000806000806080858703121561222c5761222b611c07565b5b600061223a87828801611d5d565b945050602085013567ffffffffffffffff81111561225b5761225a611c0c565b5b612267878288016121e4565b935050604085013567ffffffffffffffff81111561228857612287611c0c565b5b612294878288016121e4565b925050606085013567ffffffffffffffff8111156122b5576122b4611c0c565b5b6122c187828801611d18565b91505092959194509250565b6000819050919050565b60006122f26122ed6122e884611ab8565b6122cd565b611ab8565b9050919050565b6000612304826122d7565b9050919050565b6000612316826122f9565b9050919050565b6123268161230b565b82525050565b6000602082019050612341600083018461231d565b92915050565b61235081611d9d565b82525050565b600060208201905061236b6000830184612347565b92915050565b60006020828403121561238757612386611c07565b5b600082013567ffffffffffffffff8111156123a5576123a4611c0c565b5b6123b184828501611fa4565b91505092915050565b6000602082840312156123d0576123cf611c07565b5b60006123de84828501611dbe565b91505092915050565b600080604083850312156123fe576123fd611c07565b5b600061240c85828601611dbe565b925050602061241d85828601611dbe565b9150509250929050565b6000819050919050565b61243a81612427565b82525050565b60006020820190506124556000830184612431565b92915050565b60008115159050919050565b6124708161245b565b82525050565b600060208201905061248b6000830184612467565b92915050565b60008060008061012085870312156124ac576124ab611c07565b5b60006124ba87828801611e33565b94505060406124cb87828801611ee4565b93505060c06124dc87828801611e33565b92505061010085013567ffffffffffffffff8111156124fe576124fd611c0c565b5b61250a87828801611fa4565b91505092959194509250565b60006020828403121561252c5761252b611c07565b5b600061253a84828501611d5d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061258a57607f821691505b60208210810361259d5761259c612543565b5b50919050565b7f496e76616c69642068617368656420696e707574206c656e6774680000000000600082015250565b60006125d9601b83611b1f565b91506125e4826125a3565b602082019050919050565b60006020820190508181036000830152612608816125cc565b9050919050565b7f426f756e747920616c7265616479207375626d69747465640000000000000000600082015250565b6000612645601883611b1f565b91506126508261260f565b602082019050919050565b6000602082019050818103600083015261267481612638565b9050919050565b7f496e76616c696420766572696669657220616464726573730000000000000000600082015250565b60006126b1601883611b1f565b91506126bc8261267b565b602082019050919050565b600060208201905081810360008301526126e0816126a4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008160f81b9050919050565b600061272e82612716565b9050919050565b61274661274182611bc6565b612723565b82525050565b6000819050919050565b61276761276282612427565b61274c565b82525050565b60006127798288612735565b6001820191506127898287612735565b6001820191506127998286612735565b6001820191506127a98285612735565b6001820191506127b98284612756565b6020820191508190509695505050505050565b600081905092915050565b60008190508160005260206000209050919050565b600081546127f981612572565b61280381866127cc565b9450600182166000811461281e576001811461283357612866565b60ff1983168652811515820286019350612866565b61283c856127d7565b60005b8381101561285e5781548189015260018201915060208101905061283f565b838801955050505b50505092915050565b600061287b82846127ec565b915081905092915050565b7f4461746120434944206d69736d61746368000000000000000000000000000000600082015250565b60006128bc601183611b1f565b91506128c782612886565b602082019050919050565b600060208201905081810360008301526128eb816128af565b9050919050565b600060029050919050565b600081905092915050565b6000819050919050565b61291b81611d9d565b82525050565b600061292d8383612912565b60208301905092915050565b6000602082019050919050565b61294f816128f2565b61295981846128fd565b925061296482612908565b8060005b8381101561299557815161297c8782612921565b965061298783612939565b925050600181019050612968565b505050505050565b600060029050919050565b600081905092915050565b6000819050919050565b600081905092915050565b6129d1816128f2565b6129db81846129bd565b92506129e682612908565b8060005b83811015612a175781516129fe8782612921565b9650612a0983612939565b9250506001810190506129ea565b505050505050565b6000612a2b83836129c8565b60408301905092915050565b6000602082019050919050565b612a4d8161299d565b612a5781846129a8565b9250612a62826129b3565b8060005b83811015612a93578151612a7a8782612a1f565b9650612a8583612a37565b925050600181019050612a66565b505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000602082019050919050565b6000612adf82612a9b565b612ae98185612aa6565b9350612af483612ab7565b8060005b83811015612b25578151612b0c8882612921565b9750612b1783612ac7565b925050600181019050612af8565b5085935050505092915050565b600061012082019050612b486000830187612946565b612b556040830186612a44565b612b6260c0830185612946565b818103610100830152612b758184612ad4565b905095945050505050565b612b898161245b565b8114612b9457600080fd5b50565b600081519050612ba681612b80565b92915050565b600060208284031215612bc257612bc1611c07565b5b6000612bd084828501612b97565b91505092915050565b7f496e76616c69642070726f6f6600000000000000000000000000000000000000600082015250565b6000612c0f600d83611b1f565b9150612c1a82612bd9565b602082019050919050565b60006020820190508181036000830152612c3e81612c02565b9050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612c927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612c55565b612c9c8683612c55565b95508019841693508086168417925050509392505050565b6000612ccf612cca612cc584611d9d565b6122cd565b611d9d565b9050919050565b6000819050919050565b612ce983612cb4565b612cfd612cf582612cd6565b848454612c62565b825550505050565b600090565b612d12612d05565b612d1d818484612ce0565b505050565b5b81811015612d4157612d36600082612d0a565b600181019050612d23565b5050565b601f821115612d8657612d57816127d7565b612d6084612c45565b81016020851015612d6f578190505b612d83612d7b85612c45565b830182612d22565b50505b505050565b600082821c905092915050565b6000612da960001984600802612d8b565b1980831691505092915050565b6000612dc28383612d98565b9150826002028217905092915050565b612ddb826120fa565b67ffffffffffffffff811115612df457612df3611c1b565b5b612dfe8254612572565b612e09828285612d45565b600060209050601f831160018114612e3c5760008415612e2a578287015190505b612e348582612db6565b865550612e9c565b601f198416612e4a866127d7565b60005b82811015612e7257848901518255600182019150602085019450602081019050612e4d565b86831015612e8f5784890151612e8b601f891682612d98565b8355505b6001600288020188555050505b505050505050565b7f426f756e747920697320616c726561647920636f6d706c657465000000000000600082015250565b6000612eda601a83611b1f565b9150612ee582612ea4565b602082019050919050565b60006020820190508181036000830152612f0981612ecd565b9050919050565b7f426f756e74792068756e74657220686173206e6f74207375626d69747465642060008201527f70726f6f66000000000000000000000000000000000000000000000000000000602082015250565b6000612f6c602583611b1f565b9150612f7782612f10565b604082019050919050565b60006020820190508181036000830152612f9b81612f5f565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612ffe602e83611b1f565b915061300982612fa2565b604082019050919050565b6000602082019050818103600083015261302d81612ff1565b9050919050565b7f426f756e747920726577617264206d757374206265206772656174657220746860008201527f616e203000000000000000000000000000000000000000000000000000000000602082015250565b6000613090602483611b1f565b915061309b82613034565b604082019050919050565b600060208201905081810360008301526130bf81613083565b9050919050565b60008190508160005260206000209050919050565b601f82111561311c576130ed816130c6565b6130f684612c45565b81016020851015613105578190505b61311961311185612c45565b830182612d22565b50505b505050565b61312a82611b14565b67ffffffffffffffff81111561314357613142611c1b565b5b61314d8254612572565b6131588282856130db565b600060209050601f83116001811461318b5760008415613179578287015190505b6131838582612db6565b8655506131eb565b601f198416613199866130c6565b60005b828110156131c15784890151825560018201915060208501945060208101905061319c565b868310156131de57848901516131da601f891682612d98565b8355505b6001600288020188555050505b505050505050565b6000819050919050565b600061321861321361320e846131f3565b6122cd565b611bc6565b9050919050565b613228816131fd565b82525050565b6000602082019050613243600083018461321f565b92915050565b7f496e76616c696420696e707574206c656e677468000000000000000000000000600082015250565b600061327f601483611b1f565b915061328a82613249565b602082019050919050565b600060208201905081810360008301526132ae81613272565b9050919050565b7f4f6e6c7920626f756e74792068756e7465722063616e20636c61696d20626f7560008201527f6e74790000000000000000000000000000000000000000000000000000000000602082015250565b6000613311602383611b1f565b915061331c826132b5565b604082019050919050565b6000602082019050818103600083015261334081613304565b9050919050565b7f426f756e7479206973206e6f7420636f6d706c65746500000000000000000000600082015250565b600061337d601683611b1f565b915061338882613347565b602082019050919050565b600060208201905081810360008301526133ac81613370565b9050919050565b7f426f756e747920616c726561647920636c61696d656400000000000000000000600082015250565b60006133e9601683611b1f565b91506133f4826133b3565b602082019050919050565b60006020820190508181036000830152613418816133dc565b9050919050565b60006040820190506134346000830185612347565b6134416020830184612347565b9392505050565b6000613453826120fa565b61345d81856127cc565b935061346d818560208601611b30565b80840191505092915050565b60006134858284613448565b915081905092915050565b61349981612427565b81146134a457600080fd5b50565b6000815190506134b681613490565b92915050565b6000602082840312156134d2576134d1611c07565b5b60006134e0848285016134a7565b91505092915050565b7f496e76616c696420707265696d61676500000000000000000000000000000000600082015250565b600061351f601083611b1f565b915061352a826134e9565b602082019050919050565b6000602082019050818103600083015261354e81613512565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061358f82611d9d565b915061359a83611d9d565b92508282019050808211156135b2576135b1613555565b5b92915050565b7f5665726966696572206e6f742073657400000000000000000000000000000000600082015250565b60006135ee601083611b1f565b91506135f9826135b8565b602082019050919050565b6000602082019050818103600083015261361d816135e1565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613680602683611b1f565b915061368b82613624565b604082019050919050565b600060208201905081810360008301526136af81613673565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006136ec602083611b1f565b91506136f7826136b6565b602082019050919050565b6000602082019050818103600083015261371b816136df565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061377e602b83611b1f565b915061378982613722565b604082019050919050565b600060208201905081810360008301526137ad81613771565b905091905056fea2646970667358221220cbbd75423c520ed527f489427da491f7f2546977b6c5ddf8db07f941f483287064736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c80633e362c961461004457806347e669471461006f578063dc2f87441461009a578063e21ee03d146100d7575b600080fd5b34801561005057600080fd5b50610059610107565b60405161006691906103ef565b60405180910390f35b34801561007b57600080fd5b5061008461010d565b604051610091919061044b565b60405180910390f35b3480156100a657600080fd5b506100c160048036038101906100bc91906104a6565b610131565b6040516100ce919061044b565b60405180910390f35b6100f160048036038101906100ec91906106ba565b610170565b6040516100fe919061044b565b60405180910390f35b60015481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061014157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008034116101b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ab906107e4565b60405180910390fd5b60006101df7f000000000000000000000000000000000000000000000000000000000000000061031c565b90508073ffffffffffffffffffffffffffffffffffffffff1663267eb9ed34338888886040518663ffffffff1660e01b815260040161022194939291906108c7565b6000604051808303818588803b15801561023a57600080fd5b505af115801561024e573d6000803e3d6000fd5b50505050506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f296fd2c434595e170589ead76f71af701ab651dd12e03e8c108123ec7c809a7360405160405180910390a26001600081548092919061030c90610950565b9190505550809150509392505050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f09050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036103d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c8906109e4565b60405180910390fd5b919050565b6000819050919050565b6103e9816103d6565b82525050565b600060208201905061040460008301846103e0565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104358261040a565b9050919050565b6104458161042a565b82525050565b6000602082019050610460600083018461043c565b92915050565b6000604051905090565b600080fd5b600080fd5b610483816103d6565b811461048e57600080fd5b50565b6000813590506104a08161047a565b92915050565b6000602082840312156104bc576104bb610470565b5b60006104ca84828501610491565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610526826104dd565b810181811067ffffffffffffffff82111715610545576105446104ee565b5b80604052505050565b6000610558610466565b9050610564828261051d565b919050565b600067ffffffffffffffff821115610584576105836104ee565b5b61058d826104dd565b9050602081019050919050565b82818337600083830152505050565b60006105bc6105b784610569565b61054e565b9050828152602081018484840111156105d8576105d76104d8565b5b6105e384828561059a565b509392505050565b600082601f830112610600576105ff6104d3565b5b81356106108482602086016105a9565b91505092915050565b600067ffffffffffffffff821115610634576106336104ee565b5b61063d826104dd565b9050602081019050919050565b600061065d61065884610619565b61054e565b905082815260208101848484011115610679576106786104d8565b5b61068484828561059a565b509392505050565b600082601f8301126106a1576106a06104d3565b5b81356106b184826020860161064a565b91505092915050565b6000806000606084860312156106d3576106d2610470565b5b600084013567ffffffffffffffff8111156106f1576106f0610475565b5b6106fd868287016105eb565b935050602084013567ffffffffffffffff81111561071e5761071d610475565b5b61072a868287016105eb565b925050604084013567ffffffffffffffff81111561074b5761074a610475565b5b6107578682870161068c565b9150509250925092565b600082825260208201905092915050565b7f426f756e7479466163746f72793a206d7573742073656e64206d6f726520746860008201527f616e20302077656920746f2063726561746520626f756e747900000000000000602082015250565b60006107ce603983610761565b91506107d982610772565b604082019050919050565b600060208201905081810360008301526107fd816107c1565b9050919050565b600081519050919050565b60005b8381101561082d578082015181840152602081019050610812565b60008484015250505050565b600061084482610804565b61084e8185610761565b935061085e81856020860161080f565b610867816104dd565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b600061089982610872565b6108a3818561087d565b93506108b381856020860161080f565b6108bc816104dd565b840191505092915050565b60006080820190506108dc600083018761043c565b81810360208301526108ee8186610839565b905081810360408301526109028185610839565b90508181036060830152610916818461088e565b905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061095b826103d6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361098d5761098c610921565b5b600182019050919050565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b60006109ce601683610761565b91506109d982610998565b602082019050919050565b600060208201905081810360008301526109fd816109c1565b905091905056fea26469706673582212202bc5b1eabb47fd14a165a9a00410d7db1a37fdc39800b9d22865e484cc1010ee64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1150,
        "contract": "contracts/BountyFactory.sol:BountyFactory",
        "label": "bounties",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1152,
        "contract": "contracts/BountyFactory.sol:BountyFactory",
        "label": "bountyCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}